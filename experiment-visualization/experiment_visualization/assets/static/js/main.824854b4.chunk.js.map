{"version":3,"sources":["request.js","index.js"],"names":["codeMessage","checkStatus","response","status","errortext","statusText","notification","error","message","url","description","Error","name","proxyRequest","options","checkResponseCode","prefix","newOptions","credentials","method","body","FormData","headers","Accept","JSON","stringify","sessionId","localStorage","getItem","language","fetch","then","r","json","e","code","data","jsonResponse","console","warn","request","startsWith","pathJoin","get","qsStringify","post","put","delete","experimentReducer","experimentVis","renderDatasetSummary","renderExperimentProcess","ActionType","log","StepStatus","info","experimentStore","steps","document","getElementById","send2store","event","dispatch","eventBegin","watchEventInterval","watchNewEvents","params","begin","toString","events","length","forEach","type","ExperimentBreak","ExperimentEnd","isExperimentFinishedEvent","clearInterval","experimentFinished","expState","ExperimentStart","payload","setInterval"],"mappings":"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","file":"static/js/main.824854b4.chunk.js","sourcesContent":["import { fetch } from 'dva';\r\n// import { router } from 'umi';\r\nimport { notification } from 'antd';\r\nimport { join as pathJoin } from 'path';\r\nimport { stringify as qsStringify } from 'qs';\r\n// import router from 'umi/router';\r\n\r\n// import './promise';\r\nconst apiPrefix = '';\r\n\r\nconst codeMessage = {\r\n  200: '服务器成功返回请求的数据。',\r\n  201: '新建或修改数据成功。',\r\n  202: '一个请求已经进入后台排队（异步任务）。',\r\n  204: '删除数据成功。',\r\n  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\r\n  401: '用户没有权限（令牌、用户名、密码错误）。',\r\n  403: '用户得到授权，但是访问是被禁止的。',\r\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\r\n  406: '请求的格式不可得。',\r\n  410: '请求的资源被永久删除，且不会再得到的。',\r\n  422: '当创建一个对象时，发生一个验证错误。',\r\n  500: '服务器发生错误，请检查服务器。',\r\n  502: '网关错误。',\r\n  503: '服务不可用，服务器暂时过载或维护。',\r\n  504: '网关超时。',\r\n};\r\nfunction checkStatus(response) {\r\n  // console.log(response.headers.get('Date'));\r\n  if (response && response.status >= 200 && response.status < 300) {\r\n    return response;\r\n  }\r\n  const errortext = codeMessage[response.status] || response.statusText;\r\n  notification.error({\r\n    message: `请求错误 ${response.status}: ${response.url}`,\r\n    description: errortext,\r\n  });\r\n  const error = new Error(errortext);\r\n  error.name = response.status;\r\n  error.response = response;\r\n  throw error;\r\n}\r\n\r\n// function changeLoadingStatus(response, loadingId) {\r\n//   if (loadingId) {\r\n//     window.g_app._store.dispatch({\r\n//       type: 'loadingstatus/remove',\r\n//       payload: {\r\n//         loadingId,\r\n//       },\r\n//     });\r\n//   }\r\n//   return response;\r\n// }\r\n\r\n/**\r\n * Requests a URL, returning a promise.\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n * @param  checkResponseCode 是否检查返回状态码，如果要求，则会检查相应的状态码，如果不对右侧通知，如果设置为false则不检查状态\r\n * @return {object}           An object containing either \"data\" or \"err\"\r\n */\r\nexport function request(url, options, checkResponseCode) {\r\n  const defaultOptions = {\r\n    credentials: 'include',\r\n  };\r\n  // const loadingId = options && options.body && options.body.loadingId;\r\n  const newOptions = { ...defaultOptions, ...options };\r\n  if (newOptions.method === 'POST' || newOptions.method === 'PUT' || newOptions.method === 'DELETE') {\r\n    if (!(newOptions.body instanceof FormData)) {\r\n      // if (typeof newOptions.body === 'object' && !Array.isArray(newOptions.body)) {\r\n      //   const { ...body } = newOptions.body;\r\n      //   delete body.loadingId;\r\n      //   newOptions.body = body;\r\n      // }\r\n      newOptions.headers = {\r\n        Accept: 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n        ...newOptions.headers,\r\n      };\r\n      newOptions.body = JSON.stringify(newOptions.body);\r\n    } else {\r\n      // newOptions.body is FormData\r\n      newOptions.headers = {\r\n        Accept: 'application/json',\r\n        ...newOptions.headers,\r\n      };\r\n    }\r\n  }\r\n\r\n  //\r\n  newOptions.headers = {\r\n    ...newOptions.headers,\r\n    sessionId: localStorage.getItem('sessionId'),\r\n    language: localStorage.getItem('intlLang'),\r\n  };\r\n  return fetch(url, newOptions).then(checkStatus).then(r => {\r\n    try {\r\n      return r.json();\r\n    }catch (e){\r\n      // 如果请求不是一个json 将会报错\r\n      return {\r\n        code: -2,\r\n        data: {}\r\n      }\r\n    }\r\n  } ).then((jsonResponse) => {\r\n      if(checkResponseCode === true) {\r\n        if(jsonResponse.code !== 0){\r\n          // showNotification(JSON.stringify(jsonResponse));\r\n          console.warn(JSON.stringify(jsonResponse))\r\n        }\r\n      }\r\n      return jsonResponse;\r\n    })\r\n}\r\n\r\n/**\r\n *  the proxy of request\r\n * @param url\r\n * @param options\r\n * @returns {*}\r\n */\r\nfunction proxyRequest(url, options, checkResponseCode) {\r\n  options = options || {};\r\n  const prefix = options.prefix || apiPrefix;\r\n  url = url.startsWith(prefix) ? url : pathJoin(prefix, url);\r\n  return request(url, options, checkResponseCode);\r\n}\r\n\r\n/**\r\n * @param url\r\n * @param data   such as : {name = xxx ,age = xx } equel : url ? name=xxx&age=xx\r\n * @param options\r\n * @returns {*}\r\n */\r\nproxyRequest.get = (url, data, options, checkResponseCode=true) => {\r\n  options = options || {};\r\n  url = data ? `${url}?${qsStringify(data)}` : url;\r\n  return proxyRequest(url, options, checkResponseCode);\r\n};\r\n/**\r\n *\r\n * @param url\r\n * @param data\r\n * @param options\r\n * @returns {*}\r\n */\r\nproxyRequest.post = (url, data, options, checkResponseCode=true) => {\r\n  options = options || {};\r\n  options.body = data;\r\n  options.method = 'POST';\r\n  return proxyRequest(url, options, checkResponseCode);\r\n};\r\n\r\n/**\r\n *\r\n * @param url\r\n * @param data\r\n * @param options\r\n * @returns {*}\r\n */\r\nproxyRequest.put = (url, data, options, checkResponseCode=true) => {\r\n  options = options || {};\r\n  options.body = data || {};\r\n  options.method = 'PUT';\r\n  return proxyRequest(url, options, checkResponseCode);\r\n};\r\n\r\n/**\r\n *\r\n * @param url\r\n * @param data\r\n * @param options\r\n * @returns {*}\r\n */\r\nproxyRequest.delete = (url, data, options, checkResponseCode=true) => {\r\n  options = options || {};\r\n  options.body = data || {};\r\n  options.method = 'DELETE';\r\n  return proxyRequest(url, options, checkResponseCode);\r\n};\r\n\r\n/**\r\n * @param url\r\n * @param options\r\n * @returns {*}\r\n */\r\nexport default proxyRequest;\r\n","import  { experimentVis }  from \"experiment-visualization-frontend\";\r\nimport request from './request';\r\n\r\nconst { renderDatasetSummary, experimentReducer, renderExperimentProcess, ActionType, StepStatus } = experimentVis;\r\n\r\nconst log = console;\r\n\r\nlog.info(experimentReducer);\r\n\r\nconst experimentData = {\r\n    status: \"init\", //\r\n    steps: []\r\n}\r\n\r\nconst domElement = document.getElementById('root');\r\nconst experimentStore = renderExperimentProcess(experimentData, domElement)\r\n\r\nfunction send2store(event){\r\n    experimentStore.dispatch(event)\r\n}\r\n\r\nfunction isExperimentFinishedEvent(event){\r\n    const {type} = event;\r\n    return type === ActionType.ExperimentBreak || type === ActionType.ExperimentEnd\r\n}\r\n\r\nlet eventBegin = 0;\r\nlet watchEventInterval = null ;\r\n\r\nfunction watchNewEvents(){\r\n    const params = {begin: eventBegin};\r\n    request.get(`/api/events`, params).then(response => {\r\n        log.info(\"watchNewEvents begin event \"+ eventBegin.toString() + \", response\")\r\n        log.info(JSON.stringify(response))\r\n\r\n        const events = response.data.events ;\r\n        eventBegin = eventBegin + events.length;\r\n\r\n        events.forEach(event => {\r\n            // 往 store 里发送事件\r\n            send2store(event)\r\n\r\n            // check experiment whatever finished\r\n            if (isExperimentFinishedEvent(event)){\r\n                log.info(\"checked finished event, stop the interval, id: \" + watchEventInterval.toString())\r\n                if (watchEventInterval !== null){\r\n                    clearInterval(watchEventInterval)\r\n                }\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n// TODO: 处理后端服务已经停止的情况，实验中断或者被强行停止\r\nrequest.get(`/api/events`).then(response => {\r\n    console.info(\"response\");\r\n    console.info(response);\r\n\r\n    const data = response.data;\r\n    const { events } = data;\r\n    let experimentFinished = false;\r\n    // merge all events now\r\n    let expState = {}\r\n    events.forEach( event => {\r\n        expState = experimentReducer(expState, event)\r\n        const {type} = event;\r\n        if(type === ActionType.ExperimentBreak || type === ActionType.ExperimentEnd) {\r\n            experimentFinished = true;\r\n        }\r\n    });\r\n\r\n    // send to store\r\n    send2store(\r\n        {\r\n            type: ActionType.ExperimentStart,\r\n            payload: expState\r\n        }\r\n    )\r\n\r\n    // start interval to watch new events if experiment not finished\r\n    if (!experimentFinished){\r\n        eventBegin = events.length;\r\n        watchEventInterval = setInterval(watchNewEvents, 1000);\r\n        log.info(\"experiment not finished yet, start a interval to watch new event, interval id: \"\r\n            + watchEventInterval.toString() + \", current already received \" + eventBegin.toString() + \" events \")\r\n    }else{\r\n        log.info(\"checked experiment is finished on page start, do not start the watchNewEvent interval\")\r\n    }\r\n})\r\n\r\n\r\n"],"sourceRoot":""}